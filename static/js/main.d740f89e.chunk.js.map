{"version":3,"sources":["components/Loader/Loader.tsx","utils/fetchClient.ts","components/CommentsContext/CommentsContext.tsx","components/ModalPostContext/ModalPostContext.tsx","components/NewCommentForm.tsx","api/api.ts","components/CommentItem/CommentItem.tsx","components/CommentList/CommentList.tsx","components/PostDetails.tsx","components/Sidebar/Sidebar.tsx","components/ModalUserContext/ModalUserContext.tsx","components/UserItem/UserItem.tsx","components/UserSelector.tsx","components/PostItem/PostItem.tsx","components/PostsList.tsx","components/MainContent/MainContent.tsx","App.tsx","index.tsx"],"names":["Loader","className","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","DEFAULT_COMMENTS","comments","setComments","CommentsContext","React","createContext","CommentsProvider","children","useState","Provider","value","DEFAULT_MODAL_POST","modalPost","setModalPost","ModalPostContext","ModalPostProvider","DEFAULT_FIELDS","name","email","NewCommentForm","formFields","setFormFields","isError","setIsError","isLoading","setIsLoading","useContext","checkForErrors","key","handleSubmitForm","event","a","preventDefault","postId","id","newPost","prevState","console","error","handleFormFieldChange","target","onSubmit","onReset","htmlFor","type","placeholder","classNames","onChange","CommentItem","comment","href","onClick","filter","CommentList","map","PostDetails","post","title","isLoader","setIsLoader","isWriting","setIsWriting","isShowComments","length","isShowError","isShowLoader","isNoComments","isShowWriteButton","useEffect","serverComments","Sidebar","DEFAULT_MODAL_USER","modalUser","setModalUser","ModalUserContext","ModalUserProvider","UserItem","user","onActiveToggle","UserSelector","users","isActive","setIsActive","role","PostItem","isOpen","PostsList","posts","MainContent","setPosts","isLoad","setIsLoad","showLoad","showError","showPostList","showNoPostsYet","userId","serverPosts","App","setUsers","serverUsers","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d740f89e.chunk.js","sourcesContent":["import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: <T>(url: string) => request<T>(url, 'DELETE'),\n};\n","import React, { useState } from 'react';\nimport { Comment } from '../../types/Comment';\n\ntype CommentsContextType = {\n  comments: Comment[];\n  setComments: (comments: Comment[]) => void;\n};\n\nconst DEFAULT_COMMENTS: CommentsContextType = {\n  comments: [],\n  setComments: () => { },\n};\n\nexport const CommentsContext = React\n  .createContext<CommentsContextType>(DEFAULT_COMMENTS);\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport const CommentsProvider: React.FC<Props> = ({ children }) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n\n  return (\n    <CommentsContext.Provider value={{ comments, setComments }}>\n      {children}\n    </CommentsContext.Provider>\n  );\n};\n","import React, { useState } from 'react';\nimport { Post } from '../../types/Post';\n\ntype ModalPostContextType = {\n  modalPost: Post | null;\n  setModalPost: (post: Post | null) => void;\n};\n\nconst DEFAULT_MODAL_POST: ModalPostContextType = {\n  modalPost: null,\n  setModalPost: () => { },\n};\n\nexport const ModalPostContext = React\n  .createContext<ModalPostContextType>(DEFAULT_MODAL_POST);\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport const ModalPostProvider: React.FC<Props> = ({ children }) => {\n  const [modalPost, setModalPost] = useState<Post | null>(null);\n\n  return (\n    <ModalPostContext.Provider value={{ modalPost, setModalPost }}>\n      {children}\n    </ModalPostContext.Provider>\n  );\n};\n","import classNames from 'classnames';\nimport React, { useContext, useState } from 'react';\nimport { addComment } from '../api/api';\nimport { CommentData } from '../types/Comment';\nimport { CommentsContext } from './CommentsContext';\nimport { ModalPostContext } from './ModalPostContext';\n\nconst DEFAULT_FIELDS: CommentData = {\n  name: '',\n  email: '',\n  body: '',\n};\n\nexport const NewCommentForm: React.FC = () => {\n  const [formFields, setFormFields] = useState<CommentData>(DEFAULT_FIELDS);\n  const [isError, setIsError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const { comments, setComments } = useContext(CommentsContext);\n  const { modalPost } = useContext(ModalPostContext);\n\n  const checkForErrors = (key: keyof CommentData) => {\n    return isError && !formFields[key];\n  };\n\n  const handleSubmitForm = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!formFields.name || !formFields.email || !formFields.body) {\n      setIsError(true);\n\n      return;\n    }\n\n    setIsLoading(true);\n    try {\n      const newPost = await addComment({\n        postId: modalPost?.id,\n        name: formFields.name,\n        email: formFields.email,\n        body: formFields.body,\n      });\n\n      setComments([...comments, newPost]);\n      setFormFields(prevState => ({ ...prevState, body: '' }));\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    } finally {\n      setIsError(false);\n      setIsLoading(false);\n    }\n  };\n\n  const handleResetForm = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setIsError(false);\n    setFormFields(DEFAULT_FIELDS);\n  };\n\n  const handleFormFieldChange = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n    key: keyof CommentData,\n  ) => {\n    setFormFields(prevState => ({ ...prevState, [key]: event.target.value }));\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleSubmitForm}\n      onReset={handleResetForm}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', {\n              'is-danger': checkForErrors('name'),\n            })}\n            value={formFields.name}\n            onChange={event => handleFormFieldChange(event, 'name')}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {checkForErrors('name') && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {checkForErrors('name') && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', {\n              'is-danger': checkForErrors('email'),\n            })}\n            value={formFields.email}\n            onChange={event => handleFormFieldChange(event, 'email')}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {checkForErrors('email') && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {checkForErrors('email') && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', {\n              'is-danger': checkForErrors('body'),\n            })}\n            value={formFields.body}\n            onChange={event => handleFormFieldChange(event, 'body')}\n          />\n        </div>\n\n        {checkForErrors('body') && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button', 'is-link', {\n              'is-loading': isLoading,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button type=\"reset\" className=\"button is-link is-light\">\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Post } from '../types/Post';\nimport { User } from '../types/User';\nimport { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n\nexport const getPostsByUserId = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n\nexport const getCommentsByPostId = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const deleteCommentById = (commId: number) => {\n  return client.delete<Comment>(`/comments/${commId}`);\n};\n\nexport const addComment = (data: any) => {\n  return client.post<Comment>('/comments', data);\n};\n","import { useContext } from 'react';\nimport { Comment } from '../../types/Comment';\nimport { CommentsContext } from '../CommentsContext';\nimport { deleteCommentById } from '../../api/api';\n\ntype Props = {\n  comment: Comment;\n};\n\nexport const CommentItem: React.FC<Props> = ({ comment }) => {\n  const {\n    id,\n    email,\n    name,\n    body,\n  } = comment;\n  const { comments, setComments } = useContext(CommentsContext);\n\n  const handleDeleteComment = () => {\n    setComments(comments.filter(({ id: comId }) => comId !== id));\n\n    deleteCommentById(id);\n  };\n\n  return (\n    <article className=\"message is-small\" data-cy=\"Comment\">\n      <div className=\"message-header\">\n        <a href={`mailto:${email}`} data-cy=\"CommentAuthor\">\n          {name}\n        </a>\n        <button\n          data-cy=\"CommentDelete\"\n          type=\"button\"\n          className=\"delete is-small\"\n          aria-label=\"delete\"\n          onClick={handleDeleteComment}\n        >\n          delete button\n        </button>\n      </div>\n\n      <div className=\"message-body\" data-cy=\"CommentBody\">\n        {body}\n      </div>\n    </article>\n  );\n};\n","import { Comment } from '../../types/Comment';\nimport { CommentItem } from '../CommentItem';\n\ntype Props = {\n  comments: Comment[];\n};\n\nexport const CommentList: React.FC<Props> = ({ comments }) => {\n  return (\n    <>\n      <p className=\"title is-4\">Comments:</p>\n\n      {comments.map(comment => (\n        <CommentItem comment={comment} key={comment.id} />))}\n    </>\n  );\n};\n","import React, { useContext, useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { getCommentsByPostId } from '../api/api';\nimport { CommentList } from './CommentList';\nimport { CommentsContext } from './CommentsContext';\n\ntype Props = {\n  post: Post;\n};\n\nexport const PostDetails: React.FC<Props> = ({ post }) => {\n  const { id, title, body } = post;\n  const { comments, setComments } = useContext(CommentsContext);\n  const [isError, setIsError] = useState(false);\n  const [isLoader, setIsLoader] = useState(false);\n  const [isWriting, setIsWriting] = useState(false);\n\n  const isShowComments = !!comments.length && !isError && !isLoader;\n  const isShowError = !comments.length && isError && !isLoader;\n  const isShowLoader = !comments.length && !isError && isLoader;\n  const isNoComments = !comments.length && !isError && !isLoader;\n  const isShowWriteButton = (isNoComments || isShowComments) && !isWriting;\n\n  useEffect(() => {\n    setIsError(false);\n    setIsLoader(true);\n    setComments([]);\n    setIsWriting(false);\n    (async () => {\n      try {\n        const serverComments = await getCommentsByPostId(id);\n\n        setComments(serverComments);\n      } catch {\n        setIsError(true);\n      } finally {\n        setIsLoader(false);\n      }\n    })();\n  }, [post]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${id}: ${title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isShowLoader && <Loader />}\n\n          {isShowError && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {isNoComments && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {isShowComments && <CommentList comments={comments} />}\n\n          {isShowWriteButton && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setIsWriting(true)}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {isWriting && <NewCommentForm />}\n      </div>\n    </div>\n  );\n};\n","import { useContext } from 'react';\nimport classNames from 'classnames';\nimport { PostDetails } from '../PostDetails';\nimport { ModalPostContext } from '../ModalPostContext';\nimport { CommentsProvider } from '../CommentsContext';\n\nexport const Sidebar: React.FC = () => {\n  const { modalPost } = useContext(ModalPostContext);\n\n  return (\n    <div\n      data-cy=\"Sidebar\"\n      className={classNames(\n        'tile',\n        'is-parent',\n        'is-8-desktop',\n        'Sidebar',\n        {\n          'Sidebar--open': modalPost,\n        },\n      )}\n    >\n      {!!modalPost && (\n        <div className=\"tile is-child box is-success \">\n          <CommentsProvider>\n            <PostDetails post={modalPost} />\n          </CommentsProvider>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { User } from '../../types/User';\n\ntype ModalUserContextType = {\n  modalUser: User | null;\n  setModalUser: (user: User | null) => void;\n};\n\nconst DEFAULT_MODAL_USER: ModalUserContextType = {\n  modalUser: null,\n  setModalUser: () => { },\n};\n\nexport const ModalUserContext = React\n  .createContext<ModalUserContextType>(DEFAULT_MODAL_USER);\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport const ModalUserProvider: React.FC<Props> = ({ children }) => {\n  const [modalUser, setModalUser] = useState<User | null>(null);\n\n  return (\n    <ModalUserContext.Provider value={{ modalUser, setModalUser }}>\n      {children}\n    </ModalUserContext.Provider>\n  );\n};\n","import { useContext } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../../types/User';\nimport { ModalUserContext } from '../ModalUserContext';\n\ntype Props = {\n  user: User;\n  onActiveToggle: (isActive: boolean) => void;\n};\n\nexport const UserItem: React.FC<Props> = ({ user, onActiveToggle }) => {\n  const { id, name } = user;\n  const { modalUser, setModalUser } = useContext(ModalUserContext);\n\n  const handleSelectUser = () => {\n    setModalUser(user);\n    onActiveToggle(false);\n  };\n\n  return (\n    <a\n      href={`#user-${id}`}\n      className={classNames('dropdown-item', {\n        'is-active': modalUser?.id === id,\n      })}\n      key={id}\n      onClick={handleSelectUser}\n    >\n      {name}\n    </a>\n  );\n};\n","import { useContext, useState } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\nimport { UserItem } from './UserItem';\nimport { ModalUserContext } from './ModalUserContext';\n\ntype Props = {\n  users: User[];\n};\n\nexport const UserSelector: React.FC<Props> = ({ users }) => {\n  const { modalUser } = useContext(ModalUserContext);\n  const [isActive, setIsActive] = useState(false);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', {\n        'is-active': isActive,\n      })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsActive(!isActive)}\n        >\n          <span>\n            {modalUser ? modalUser.name : 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map((user) => (\n            <UserItem\n              key={user.id}\n              user={user}\n              onActiveToggle={setIsActive}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { useContext } from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../../types/Post';\nimport { ModalPostContext } from '../ModalPostContext';\n\ntype Props = {\n  post: Post;\n};\n\nexport const PostItem: React.FC<Props> = ({ post }) => {\n  const { modalPost, setModalPost } = useContext(ModalPostContext);\n  const { id, title } = post;\n\n  const isOpen = id !== modalPost?.id;\n\n  const handlePostButtonClick = () => {\n    if (isOpen) {\n      setModalPost(post);\n\n      return;\n    }\n\n    setModalPost(null);\n  };\n\n  return (\n    <tr data-cy=\"Post\">\n      <td data-cy=\"PostId\">\n        {id}\n      </td>\n\n      <td data-cy=\"PostTitle\">\n        {title}\n      </td>\n\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          type=\"button\"\n          data-cy=\"PostButton\"\n          className={classNames('button', 'is-link', {\n            'is-light': isOpen,\n          })}\n          onClick={handlePostButtonClick}\n        >\n          {isOpen ? 'Open' : 'Close'}\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import React from 'react';\nimport { PostItem } from './PostItem';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[];\n};\n\nexport const PostsList: React.FC<Props> = ({ posts }) => {\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => <PostItem post={post} key={post.id} />)}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import { useContext, useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { PostsList } from '../PostsList';\nimport { ModalUserContext } from '../ModalUserContext';\nimport { Post } from '../../types/Post';\nimport { getPostsByUserId } from '../../api/api';\n\nexport const MainContent = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [isError, setIsError] = useState(false);\n  const [isLoad, setIsLoad] = useState(false);\n  const { modalUser } = useContext(ModalUserContext);\n\n  const showLoad = isLoad && !isError && !posts.length;\n  const showError = !isLoad && isError && !posts.length;\n  const showPostList = !isLoad && !isError && !!posts.length;\n  const showNoPostsYet = !isLoad && !isError && !posts.length;\n\n  useEffect(() => {\n    setIsError(false);\n    setIsLoad(true);\n    if (modalUser) {\n      (async () => {\n        try {\n          const serverPosts = await getPostsByUserId(modalUser.id);\n\n          setPosts(serverPosts);\n        } catch {\n          setIsError(true);\n        } finally {\n          setIsLoad(false);\n        }\n      })();\n    }\n  }, [modalUser]);\n\n  return (\n    <div className=\"block\" data-cy=\"MainContent\">\n      {modalUser ? (\n        <>\n          {showLoad && <Loader />}\n\n          {showError && (\n            <div\n              className=\"notification is-danger\"\n              data-cy=\"PostsLoadingError\"\n            >\n              Something went wrong!\n            </div>\n          )}\n\n          {showPostList && <PostsList posts={posts} />}\n\n          {showNoPostsYet && (\n            <div\n              className=\"notification is-warning\"\n              data-cy=\"NoPostsYet\"\n            >\n              No posts yet\n            </div>\n          )}\n        </>\n      ) : (\n        <p data-cy=\"NoSelectedUser\">\n          No user selected\n        </p>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport { Sidebar } from './components/Sidebar';\nimport { UserSelector } from './components/UserSelector';\nimport { MainContent } from './components/MainContent';\n\nimport { User } from './types/User';\nimport { getUsers } from './api/api';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const serverUsers = await getUsers();\n\n        setUsers(serverUsers);\n      } catch (error) {\n        // eslint-disable-next-line no-console\n        console.error(error);\n      }\n    })();\n  }, []);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector users={users} />\n              </div>\n\n              <MainContent />\n\n            </div>\n          </div>\n\n          <Sidebar />\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\nimport { ModalUserProvider } from './components/ModalUserContext';\nimport { ModalPostProvider } from './components/ModalPostContext';\n\nReactDOM.render(\n  <ModalPostProvider>\n    <ModalUserProvider>\n      <App />\n    </ModalUserProvider>\n  </ModalPostProvider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}